解法1：用dp思想解决
class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length==0) return 0;
        int[] dp = new int[prices.length];
        dp[0]=0;
        for(int i=1;i<prices.length;i++){
            dp[i]=Math.max(0,prices[i]-prices[i-1])+dp[i-1];
        }
        return dp[prices.length-1];
    }
}
需要开辟额外空间，且时间花费比较大
顺带要记一下java初始化数组的方法 以int类型为例  int[]  数组名 = new int[数组长度]


解法2：贪心算法
class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length==0||prices.length==1) return 0;
        int start=0,result=0;
        for(int i=1;i<prices.length;i++){
            int temp = prices[i]-prices[i-1];
            if(temp>0){
                result+=temp;
            }
        }
        return result;
    }
}
比解法一少开辟空间，耗时减少

解法3：参考解题集，暂时没看懂，效率比前两种解法高
class Solution {
    public int maxProfit(int[] prices) {  
        int start = 0;
        int end = 0;
        int maxProfit = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] < prices[i-1]){
                if (end > start){
                    maxProfit += prices[end] - prices[start];
                }
                start = i;
            }
            end = i;
        }
        if (end > start){
            maxProfit += prices[end] - prices[start];
        }
        return maxProfit;
    }
}
